import React, { useState, useEffect } from "react";
import "../styles/SearchBar.css";
import { City, State } from "country-state-city";
import axios from "axios";
import arrow from "../images/arrow_pic.png";

const SearchBar = () => {
  const [formData, setFormData] = useState({
    from: "",
    to: "",
    pickupDate: "27/03/25", // Default in dd/mm/yy format
    tripType: "one-way",
  });
  const [fromSearch, setFromSearch] = useState("");
  const [toSearch, setToSearch] = useState("");
  const [filteredFromCities, setFilteredFromCities] = useState([]);
  const [filteredToCities, setFilteredToCities] = useState([]);

  // Handle input changes
  const handleChange = (e) => {
    if (e.target.name === "pickupDate") {
      const date = new Date(e.target.value);
      const formattedDate = date.toLocaleDateString("en-GB").slice(0, 8); // Convert to dd/mm/yy
      setFormData({ ...formData, pickupDate: formattedDate });
    } else {
      setFormData({ ...formData, [e.target.name]: e.target.value });
    }
  };

  // Fetch & filter cities dynamically
  useEffect(() => {
    if (fromSearch) {
      const results = City.getCitiesOfCountry("IN")
        .filter((city) =>
          city.name.toLowerCase().includes(fromSearch.toLowerCase())
        )
        .slice(0, 10);
      setFilteredFromCities(results);
    } else {
      setFilteredFromCities([]);
    }
  }, [fromSearch]);

  useEffect(() => {
    if (toSearch) {
      const results = City.getCitiesOfCountry("IN")
        .filter((city) =>
          city.name.toLowerCase().includes(toSearch.toLowerCase())
        )
        .slice(0, 10);
      setFilteredToCities(results);
    } else {
      setFilteredToCities([]);
    }
  }, [toSearch]);

  // Get Coordinates of a place
  const getCoordinates = async (place) => {
    try {
      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${place}`;
      const response = await axios.get(url);
      if (response.data.length > 0) {
        return { lat: response.data[0].lat, lon: response.data[0].lon };
      } else {
        return null;
      }
    } catch (error) {
      console.error("Error fetching coordinates:", error);
      return null;
    }
  };

  // Get Distance & Time using OSRM API
  const getDistanceOSRM = async (from, to) => {
    const fromCoords = await getCoordinates(from);
    const toCoords = await getCoordinates(to);

    if (!fromCoords || !toCoords) {
      console.error("Invalid locations");
      return;
    }

    const url = `https://router.project-osrm.org/route/v1/driving/${fromCoords.lon},${fromCoords.lat};${toCoords.lon},${toCoords.lat}?overview=false`;

    try {
      const response = await axios.get(url);
      if (response.data.routes.length > 0) {
        const distanceKm = response.data.routes[0].distance / 1000;
        const durationSec = response.data.routes[0].duration;
        const hours = Math.floor(durationSec / 3600);
        const minutes = Math.floor((durationSec % 3600) / 60);

        const tripMultiplier = formData.tripType === "round-trip" ? 2 : 1;
        console.log(
          `Distance: ${(distanceKm * tripMultiplier).toFixed(2)} km, Time: ${
            hours * tripMultiplier
          }h ${minutes * tripMultiplier}m`
        );
      } else {
        console.error("No route found");
      }
    } catch (error) {
      console.error("Error fetching distance:", error);
    }
  };

  // Handle city selection
  const handleCityClick = (cityName, type) => {
    if (type === "from") {
      setFromSearch(cityName);
      setFilteredFromCities([]);
    } else {
      setToSearch(cityName);
      setFilteredToCities([]);
    }
  };

  // Trigger distance calculation on button click
  const handleExploreClick = async () => {
    if (fromSearch && toSearch) {
      await getDistanceOSRM(fromSearch, toSearch);
    }
  };

  return (
    <div className="search-container">
      <h2 className="search-title">SERVICES ACROSS 500+ CITIES</h2>
      <div className="search-box">
        <div className="trip-type">
          <button
            className={formData.tripType === "one-way" ? "active" : ""}
            onClick={() => setFormData({ ...formData, tripType: "one-way" })}
          >
            ONE WAY
          </button>
          <button
            className={formData.tripType === "round-trip" ? "active" : ""}
            onClick={() => setFormData({ ...formData, tripType: "round-trip" })}
          >
            ROUND TRIP
          </button>
        </div>
        <div className="search-fields">
          <div className="input-group">
            <label>FROM</label>
            <input
              type="text"
              placeholder="Enter Pickup City"
              value={fromSearch}
              onChange={(e) => setFromSearch(e.target.value)}
            />
            {filteredFromCities.length > 0 && (
              <ul className="suggestions">
                {filteredFromCities.map((city, index) => (
                  <li
                    key={index}
                    onClick={() => handleCityClick(city.name, "from")}
                  >
                    {city.name},{" "}
                    {State.getStateByCodeAndCountry(city.stateCode, "IN")?.name}
                  </li>
                ))}
              </ul>
            )}
          </div>
          <img src={arrow} className="arrow-img" alt="arrow image" />
          <div className="input-group">
            <label>TO</label>
            <input
              type="text"
              placeholder="Enter Drop City"
              value={toSearch}
              onChange={(e) => setToSearch(e.target.value)}
            />
            {filteredToCities.length > 0 && (
              <ul className="suggestions">
                {filteredToCities.map((city, index) => (
                  <li
                    key={index}
                    onClick={() => handleCityClick(city.name, "to")}
                  >
                    {city.name},{" "}
                    {State.getStateByCodeAndCountry(city.stateCode, "IN")?.name}
                  </li>
                ))}
              </ul>
            )}
          </div>
          <div className="input-group">
            <label>PICK UP DATE</label>
            <input type="date" name="pickupDate" onChange={handleChange} />
          </div>
        </div>
        <button className="search-btn" onClick={handleExploreClick}>
          Explore Services
        </button>
      </div>
    </div>
  );
};

export default SearchBar;