"use client"

import { useEffect, useState } from "react"
import { useNavigate } from "react-router-dom"
import { getAuth, onAuthStateChanged } from "firebase/auth"
import { getFirestore, collection, query, where, getDocs, doc, getDoc } from "firebase/firestore"
import "../styles/VendorInbox.css"
import { app } from "../firebase"

const VendorInbox = () => {
const navigate = useNavigate()
const auth = getAuth(app)
const db = getFirestore(app)

const [vendor, setVendor] = useState(null)
const [bookings, setBookings] = useState([])
const [applications, setApplications] = useState([])
const [loading, setLoading] = useState(true)
const [error, setError] = useState(null)
const [activeTab, setActiveTab] = useState("available")

useEffect(() => {
const unsubscribe = onAuthStateChanged(auth, async (user) => {
    if (user) {
    const userDoc = await getDoc(doc(db, "users", user.uid))
    if (userDoc.exists() && userDoc.data().role === "vendor") {
        setVendor({
        uid: user.uid,
        email: user.email,
        displayName: userDoc.data().businessName || user.displayName || "Vendor",
        })

        // Fetch data
        fetchAvailableBookings()
        fetchVendorApplications(user.uid)
    } else {
        setError("Not authorized as a vendor")
        navigate("/login")
    }
    } else {
    navigate("/login")
    }
})

return () => unsubscribe()
}, [auth, db, navigate])

const fetchAvailableBookings = async () => {
try {
    // Simplified query - just get pending bookings without vendor
    const bookingsQuery = query(
    collection(db, "bookings"),
    where("status", "==", "pending"),
    where("vendorId", "==", null),
    )

    const bookingsSnapshot = await getDocs(bookingsQuery)
    const bookingsData = bookingsSnapshot.docs.map((doc) => ({
    id: doc.id,
    ...doc.data(),
    createdAt: doc.data().createdAt?.toDate() || new Date(),
    }))

    // Sort manually instead of in the query
    bookingsData.sort((a, b) => b.createdAt - a.createdAt)

    setBookings(bookingsData)
    setLoading(false)
} catch (err) {
    setError("Error fetching bookings: " + err.message)
    setLoading(false)
}
}

const fetchVendorApplications = async (vendorId) => {
try {
    // Simplified query - just get applications for this vendor
    const applicationsQuery = query(collection(db, "applications"), where("vendorId", "==", vendorId))

    const snapshot = await getDocs(applicationsQuery)
    const applicationsData = []

    for (const doc of snapshot.docs) {
    const data = {
        id: doc.id,
        ...doc.data(),
        createdAt: doc.data().createdAt?.toDate() || new Date(),
    }

    // Get booking details for each application
    try {
        const bookingDoc = await getDoc(doc(db, "bookings", data.bookingId))
        if (bookingDoc.exists()) {
        data.booking = {
            id: bookingDoc.id,
            ...bookingDoc.data(),
        }
        }
    } catch (err) {
        console.error("Error fetching booking for application:", err)
    }

    applicationsData.push(data)
    }

    // Sort manually instead of in the query
    applicationsData.sort((a, b) => b.createdAt - a.createdAt)

    setApplications(applicationsData)
    setLoading(false)
} catch (err) {
    setError("Error fetching applications: " + err.message)
    setLoading(false)
}
}

const handleApply = (bookingId) => {
navigate(`/vendor/apply/${bookingId}`)
}

const getStatusBadgeClass = (status) => {
switch (status) {
    case "accepted":
    return "status-badge accepted"
    case "rejected":
    return "status-badge rejected"
    case "pending":
    return "status-badge pending"
    default:
    return "status-badge"
}
}

if (loading) return <div className="loading">Loading...</div>
if (error) return <div className="error">{error}</div>

return (
<div className="vendor-inbox-container">
    <h1>Vendor Inbox</h1>

    <div className="inbox-tabs">
    <button className={activeTab === "available" ? "active" : ""} onClick={() => setActiveTab("available")}>
        Available Requests
    </button>
    <button className={activeTab === "applications" ? "active" : ""} onClick={() => setActiveTab("applications")}>
        My Applications
    </button>
    </div>

    {activeTab === "available" && (
    <div className="bookings-list">
        <h2>Available Service Requests</h2>

        {bookings.length === 0 ? (
        <p className="no-data">No available service requests at the moment.</p>
        ) : (
        bookings.map((booking) => (
            <div className="booking-card" key={booking.id}>
            <div className="booking-header">
                <h3>Booking #{booking.id.substring(0, 6)}</h3>
                <span className="date">{booking.createdAt.toLocaleDateString()}</span>
            </div>
                {/* // by AI  */}
            {/* <div className="booking-details">
                <div className="detail-row">
                <span className="label">From:</span>
                <span className="value">{booking.pickupAddress}</span>
                </div>
                <div className="detail-row">
                <span className="label">To:</span>
                <span className="value">{booking.dropAddress}</span>
                </div>
                <div className="detail-row">
                <span className="label">Date:</span>
                <span className="value">{new Date(booking.date).toLocaleDateString()}</span>
                </div>
                <div className="detail-row">
                <span className="label">Time:</span>
                <span className="value">{booking.pickupTime}</span>
                </div>
                <div className="detail-row">
                <span className="label">Passengers:</span>
                <span className="value">{booking.passengers}</span>
                </div>
                
            </div> */}
            {/*  by me for update  */}
                    <div className="booking-details">
        <div className="detail-row">
            <span className="label">From:</span>
            <span className="value">{booking.pickupAddress}</span>
        </div>
        <div className="detail-row">
            <span className="label">To:</span>
            <span className="value">{booking.dropAddress}</span>
        </div>
    
        <div className="detail-row">
            <span className="label">Time:</span>
            <span className="value">{booking.pickupTime}</span>
        </div>
        <div className="detail-row">
            <span className="label">Passengers:</span>
            <span className="value">{booking.passengers}</span>
        </div>
        <div className="detail-row">
            <span className="label">Vehicle Type:</span>
            <span className="value">{booking.carDetails?.name}</span> {/* Vehicle Type */}
        </div>
        <div className="detail-row">
            <span className="label">Pickup Date:</span>
            <span className="value">{booking.date}</span> {/* Pickup Date */}
        </div>
        <div className="detail-row">
            <span className="label">Total Fare:</span>
            <span className="value">₹{booking.carDetails?.finalPrice}</span> {/* Total Fare */}
        </div>
        </div>


            <div className="booking-actions">
                <button className="apply-button" onClick={() => handleApply(booking.id)}>
                Apply for Service
                </button>
            </div>
            </div>
        ))
        )}
    </div>
    )}

    {activeTab === "applications" && (
    <div className="applications-list">
        <h2>My Applications</h2>

        {applications.length === 0 ? (
        <p className="no-data">You haven't applied to any service requests yet.</p>
        ) : (
        applications.map((application) => (
            <div className="application-card" key={application.id}>
            <div className="application-header">
                <h3>Application #{application.id.substring(0, 6)}</h3>
                <span className={getStatusBadgeClass(application.status)}>{application.status.toUpperCase()}</span>
            </div>

            <div className="application-details">
                <div className="detail-row">
                <span className="label">From:</span>
                <span className="value">{application.booking?.pickupAddress || "N/A"}</span>
                </div>
                <div className="detail-row">
                <span className="label">To:</span>
                <span className="value">{application.booking?.dropAddress || "N/A"}</span>
                </div>
                <div className="detail-row">
                <span className="label">Date:</span>
                <span className="value">
                    {application.booking?.date ? new Date(application.booking.date).toLocaleDateString() : "N/A"}
                </span>
                </div>
                <div className="detail-row">
                <span className="label">Your Quote:</span>
                <span className="value">₹{application.price}</span>
                </div>
                <div className="detail-row">
                <span className="label">Applied On:</span>
                <span className="value">{application.createdAt.toLocaleDateString()}</span>
                </div>
            </div>

            {application.status === "accepted" && (
                <div className="acceptance-notice">
                <p>Your application has been accepted! Please contact the customer to confirm details.</p>
                <button
                    className="view-ticket-button"
                    onClick={() => navigate(`/vendor/ticket/${application.bookingId}`)}
                >
                    View Ticket
                </button>
                </div>
            )}
            </div>
        ))
        )}
    </div>
    )}

    <button className="back-button" onClick={() => navigate("/vendor/dashboard")}>
    Back to Dashboard
    </button>
</div>
)
}

export default VendorInbox
